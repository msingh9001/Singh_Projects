//
//  Created by Mandeep Singh on 05/10/18.
//  Copyright Â© 2018 Mandeep Singh. All rights  .
//
//Ch 9 & 10 HW
//10.12 + 10.14

PayrollSystemTest:

public class PayrollSystemTest {
    public static void main(String[] args) {
        Date currentDate = new Date(4,17,2018);
      System.out.printf( "Current Date is: %s\n", currentDate.toString() );
      System.out.println("###################################");
      SalariedEmployee salariedEmployee =
         new SalariedEmployee( "John", "Wayne", "111-11-1111", new Date(5,11,1984),800.00 );
      HourlyEmployee hourlyEmployee =
         new HourlyEmployee( "Karen", "Smith", "222-22-2222", new Date(6,15,1988),16.75, 40 );
      CommissionEmployee commissionEmployee =
         new CommissionEmployee(
         "Sue", "Jones", "333-33-3333", new Date(8,25,1974),10000, .06 );
      BasePlusCommissionEmployee basePlusCommissionEmployee =
         new BasePlusCommissionEmployee(
         "Bob", "Ross", "444-44-4444", new Date(9,27,1978),5000, .04, 300 );
      PieceWorker pieceWorker = new PieceWorker("Ralph", "Jones", "777-223-987",
              new Date(4,17,1985), 213, 16);
 
      System.out.println( "Employees processed individually:\n" );
 
      System.out.printf( "%s\n%s: $%,.2f\n\n",
         salariedEmployee, "earned", salariedEmployee.earnings() );
      System.out.printf( "%s\n%s: $%,.2f\n\n",
         hourlyEmployee, "earned", hourlyEmployee.earnings() );
      System.out.printf( "%s\n%s: $%,.2f\n\n",
         commissionEmployee, "earned", commissionEmployee.earnings() );
      System.out.printf( "%s\n%s: $%,.2f\n\n",
         basePlusCommissionEmployee,
         "earned", basePlusCommissionEmployee.earnings() );
      System.out.printf( "%s\n%s: $%,.2f\n\n",
              pieceWorker, "earned", pieceWorker.earnings() );
 
      Employee employees[] = new Employee[ 5 ];
      employees[ 0 ] = salariedEmployee;
      employees[ 1 ] = hourlyEmployee;
      employees[ 2 ] = commissionEmployee;
      employees[ 3 ] = basePlusCommissionEmployee;
      employees[ 4 ] = pieceWorker;
 
      System.out.println("###################################");
      System.out.println( "Employees processed polymorphically:\n" );
 
      for ( Employee currentEmployee : employees )
      {
         System.out.println( currentEmployee );
         
         if ( currentEmployee instanceof BasePlusCommissionEmployee )
         {
            BasePlusCommissionEmployee employee =
               ( BasePlusCommissionEmployee ) currentEmployee;
            double oldBaseSalary = employee.getBaseSalary();
            employee.setBaseSalary( 1.10 * oldBaseSalary );
            System.out.printf(
               "New base salary with 10%% increase is: $%,.2f\n",
               employee.getBaseSalary() );
         }
 
         if(currentDate.getMonth()==currentEmployee.getBirthday().getMonth())
         {
             System.out.printf("Earned $%,.2f. %s\n\n", currentEmployee.earnings() + 100.00,
                     "Note: Added a $100 bonus to your payroll amount for birthday!!!" );
         }else{
             System.out.printf("Earned $%,.2f\n\n", currentEmployee.earnings() );
         }
      }

      for ( int j = 0; j < employees.length; j++ )
         System.out.printf( "Employee %d is a %s\n", j,
            employees[ j ].getClass().getSimpleName() );
    }
}

Date:

public class Date
{
   private int month;
   private int day;
   private int year;
 
   public Date( int theMonth, int theDay, int theYear )
   {
      month = theMonth;
      year = theYear;
      day = checkDay( theDay );
   } 
 
   public void setMonth(int theMonth)
   {
       month = theMonth;
   }
 
   public int getMonth()
   {
      if ( month > 0 && month <= 12 )
         return month;
      return 0;
   } 
   
   private int checkDay( int testDay )
   {
      int daysPerMonth[] =
         { 0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };
 
      if ( testDay > 0 && testDay <= daysPerMonth[ month ] )
         return testDay;
 
      if ( month == 2 && testDay == 29 && ( year % 400 == 0 ||
           ( year % 4 == 0 && year % 100 != 0 ) ) )
         return testDay;
 
      return 0;
   }
   
    @Override
    
   public String toString()
   {
      return String.format( "%d/%d/%d", month, day, year );
   }
}

Employee:

public abstract class Employee
{
   private String firstName;
   private String lastName;
   private String socialSecurityNumber;
   private Date birthday;
 
   public Employee( String first, String last, String ssn , Date DayOfBirth)
   {
      firstName = first;
      lastName = last;
      socialSecurityNumber = ssn;
      birthday = DayOfBirth;
   }
 
   public void setFirstName( String first )
   {
      firstName = first;
   } 
   
   public String getFirstName()
   {
      return firstName;
   }
   
   public void setLastName( String last )
   {
      lastName = last;
   }
   
   public String getLastName()
   {
      return lastName;
   }
   
   public void setSocialSecurityNumber( String ssn )
   {
      socialSecurityNumber = ssn;
   }
 
   public String getSocialSecurityNumber()
   {
      return socialSecurityNumber;
   }
   
   public void setBirthday(Date DayOfBirth)
   {
       birthday = DayOfBirth;
   }
   
   public Date getBirthday()
   {
       return birthday;
   }
 
    @Override
    
   public String toString()
   {
      return String.format( "%s %s\nsocial security number: %s\nbirthday: %s\n",
         getFirstName(), getLastName(), getSocialSecurityNumber(), getBirthday());
   } 
   
   public abstract double earnings();
}

HourlyEmployee:

public class HourlyEmployee extends Employee
{
   private double wage;
   private double hours;
 
   public HourlyEmployee( String first, String last, String ssn, Date DayOfBirth, double hourlyWage, double hoursWorked )
   {
      super( first, last, ssn, DayOfBirth);
      setWage( hourlyWage );
      setHours( hoursWorked );
   }
 

   public final void setWage( double hourlyWage )
   {
      wage = ( hourlyWage < 0.0 ) ? 0.0 : hourlyWage;
   }
 
   public double getWage()
   {
      return wage;
   }
   
   public final void setHours( double hoursWorked )
   {
      hours = ( ( hoursWorked >= 0.0 ) && ( hoursWorked <= 168.0 ) ) ?
         hoursWorked : 0.0;
   }
   
   public double getHours()
   {
      return hours;
   }

   @Override
   
   public double earnings()
   {
      if ( getHours() <= 40 ) // no overtime
         return getWage() * getHours();
      else
         return 40 * getWage() + ( getHours() - 40 ) * getWage() * 1.5;
   } 
   
    @Override
    
   public String toString()
   {
      return String.format( "hourly employee: %s\n%s: $%,.2f; %s: %,.2f",
         super.toString(), "hourly wage", getWage(),
         "hours worked", getHours() );
   }
}

SalariedEmployee:

public class SalariedEmployee extends Employee
{
   private double weeklySalary;
 
   public SalariedEmployee( String first, String last, String ssn, Date DayOfBirth, double salary )
   {
      super( first, last, ssn, DayOfBirth);
      setWeeklySalary( salary );
   }
 
   public final void setWeeklySalary( double salary )
   {
      weeklySalary = salary < 0.0 ? 0.0 : salary;
   }
 
   public double getWeeklySalary()
   {
      return weeklySalary;
   }
 
    @Override
   
   public double earnings()
   {
      return getWeeklySalary();
   }
   
    @Override
    
   public String toString()
   {
      return String.format( "salaried employee: %s\n%s: $%,.2f",
         super.toString(), "weekly salary", getWeeklySalary() );
   }
}

CommissionEmployee:

public class CommissionEmployee extends Employee
{
   private double grossSales;
   private double commissionRate;
 
   public CommissionEmployee( String first, String last, String ssn, Date DayOfBirth, double sales, double rate )
   {
      super( first, last, ssn, DayOfBirth);
      setGrossSales( sales );
      setCommissionRate( rate );
   }

   public final void setCommissionRate( double rate )
   {
      commissionRate = ( rate > 0.0 && rate < 1.0 ) ? rate : 0.0;
   }

   public double getCommissionRate()
   {
      return commissionRate;
   } 

   public final void setGrossSales( double sales )
   {
      grossSales = ( sales < 0.0 ) ? 0.0 : sales;
   }
 
   public double getGrossSales()
   {
      return grossSales;
   }
 
   public double earnings()
   {
      return getCommissionRate() * getGrossSales();
   }
   
    @Override
    
   public String toString()
   {
      return String.format( "%s: %s\n%s: $%,.2f; %s: %.2f",
         "commission employee", super.toString(),
         "gross sales", getGrossSales(),
         "commission rate", getCommissionRate() );
   }
}

BasePlusCommissionEmployee:

public class BasePlusCommissionEmployee extends CommissionEmployee
{
   private double baseSalary;
 
   public BasePlusCommissionEmployee( String first, String last,
      String ssn, Date DayOfBirth,double sales, double rate, double salary )
   {
      super( first, last, ssn, DayOfBirth,sales, rate );
      setBaseSalary( salary );
   }
 
   public final void setBaseSalary( double salary )
   {
      baseSalary = ( salary < 0.0 ) ? 0.0 : salary;
   }
 
   public double getBaseSalary()
   {
      return baseSalary;
   }
 
    @Override
    
   public double earnings()
   {
      return getBaseSalary() + super.earnings();
   }
 
    @Override
    
   public String toString()
   {
      return String.format( "%s %s; %s: $%,.2f",
         "base-salaried", super.toString(),
         "base salary", getBaseSalary() );
   }
}

PieceWorker:

public class PieceWorker extends Employee {
    private double wage;
    private double pieces;
 
    public PieceWorker( String first, String last, String ssn, Date DayOfBirth, double Wage, double Pieces )
    {
      super( first, last, ssn, DayOfBirth);
      setWage( Wage );
      setPieces( Pieces );
    }

    public final void setWage( double Wage )
    {
      wage = ( Wage < 0.0 ) ? 0.0 : Wage;
    }
 
    public double getWage()
    {
      return wage;
    }
 
    public final void setPieces( double Pieces )
    {
      pieces = ( ( Pieces >= 0.0 ) && ( Pieces <= 168.0 ) ) ?
         Pieces : 0.0;
    }
 
    public double getPieces()
    {
      return pieces;
    }
 
    public double earnings()
    {
      return getWage() * getPieces();
    }
    
    @Override
    
    public String toString()
    {
      return String.format( "Piece Worker: %s\n%s: $%,.2f; %s: %,.2f",
         super.toString(), "Wage per piece", getWage(),
         "Number of pieces produced", getPieces() );
    }
}

/*
OUTPUT:

run:
Current Date is: 4/17/2018
###################################
Employees processed individually:

salaried employee: John Wayne
social security number: 111-11-1111
birthday: 5/11/1984

weekly salary: $800.00
earned: $800.00

hourly employee: Karen Smith
social security number: 222-22-2222
birthday: 6/15/1988

hourly wage: $16.75; hours worked: 40.00
earned: $670.00

commission employee: Sue Jones
social security number: 333-33-3333
birthday: 8/25/1974

gross sales: $10,000.00; commission rate: 0.06
earned: $600.00

base-salaried commission employee: Bob Ross
social security number: 444-44-4444
birthday: 9/27/1978

gross sales: $5,000.00; commission rate: 0.04; base salary: $300.00
earned: $500.00

Piece Worker: Ralph Jones
social security number: 777-223-987
birthday: 4/17/1985

Wage per piece: $213.00; Number of pieces produced: 16.00
earned: $3,408.00

###################################
Employees processed polymorphically:

salaried employee: John Wayne
social security number: 111-11-1111
birthday: 5/11/1984

weekly salary: $800.00
Earned $800.00

hourly employee: Karen Smith
social security number: 222-22-2222
birthday: 6/15/1988

hourly wage: $16.75; hours worked: 40.00
Earned $670.00

commission employee: Sue Jones
social security number: 333-33-3333
birthday: 8/25/1974

gross sales: $10,000.00; commission rate: 0.06
Earned $600.00

base-salaried commission employee: Bob Ross
social security number: 444-44-4444
birthday: 9/27/1978

gross sales: $5,000.00; commission rate: 0.04; base salary: $300.00
New base salary with 10% increase is: $330.00
Earned $530.00

Piece Worker: Ralph Jones
social security number: 777-223-987
birthday: 4/17/1985

Wage per piece: $213.00; Number of pieces produced: 16.00
Earned $3,508.00. Note: Added a $100 bonus to your payroll amount for birthday!!!

Employee 0 is a SalariedEmployee
Employee 1 is a HourlyEmployee
Employee 2 is a CommissionEmployee
Employee 3 is a BasePlusCommissionEmployee
Employee 4 is a PieceWorker
*/